name: build

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tags: ${{ steps.gen_tags.outputs.tags }}
    steps:
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y git
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get sv4git
        run: |
          wget -O /tmp/sv4git.zip https://github.com/bvieira/sv4git/releases/download/v2.4.0/git-sv_2.4.0_linux_amd64.tar.gz
          cd /usr/local/bin
          tar xzf /tmp/sv4git.zip
          chmod +x git-sv
      - name: Get Version
        id: get_version
        run: |
          VERSION="$(git sv next-version)"
          if [[ "${{ github.ref }}" != refs/tags/* ]]; then
            VERSION="$VERSION-dev-$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION"
          echo "::set-output name=version::$VERSION"
      - name: Generate tags
        id: gen_tags
        run: |
          IMAGE=codablock/kluctl
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAGS="$IMAGE:$(echo "${{ github.ref }}" | sed 's|refs/tags/||')"
          else
            TAGS="$IMAGE:$(echo "${{ github.ref }}" | sed 's|refs/heads/||')"
          fi
          echo TAGS=$TAGS
          echo "::set-output name=tags::$TAGS"
      - name: Generate Changelog
        id: gen_changelog
        run: |
          git sv changelog -n 1 > CHANGELOG.md
      - name: Upload Changelog
        uses: actions/upload-artifact@v2
        with:
          name: changelog
          path: |
            CHANGELOG.md

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-18.04
            binary-suffix: linux-amd64
          - os: macos-10.15
            binary-suffix: darwin-amd64
          - os: windows-2019
            binary-suffix: windows-amd64
        os: [ubuntu-18.04, macos-10.15, windows-2019]
    runs-on: ${{ matrix.os }}
    needs:
      - version
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.17.6'
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          echo "deb-src http://archive.ubuntu.com/ubuntu/ bionic main restricted" | sudo tee /etc/apt/sources.list.d/deb-src.list
          sudo apt update
          sudo apt-get build-dep -y python3
      - name: Install dependencies on Mac
        if: runner.os == 'macOS'
        run: |
          brew install openssl
          brew install readline
      - name: Cache Python build
        id: python-cache
        uses: actions/cache@v2
        with:
          path: build-python/*/cpython-install
          key: build-python-${{ runner.os }}-${{ hashFiles('hack/build-python-*') }}
      - name: Build python (non-Windows)
        if: runner.os != 'Windows' && steps.python-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ./hack/build-python-unix.sh
      - name: Build python (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          ./hack/build-python-windows.sh
      - name: Write Version to version.go
        run: |
          sed -ibak 's/0.0.0/${{ needs.version.outputs.version }}/g' pkg/version/version.go
          cat pkg/version/version.go
      - name: Go Mod Vendor
        shell: bash
        run: |
          go mod vendor
      - name: Go Generate
        shell: bash
        run: |
          go generate ./...
      - name: Build kluctl
        shell: bash
        run: |
          go build ./cmd/kluctl
          EXE=""
          if [ "${{ runner.os }}" = "Windows" ]; then
            EXE=".exe"
          fi
          mv kluctl$EXE kluctl-${{ matrix.binary-suffix }}$EXE
      - name: Upload dist artifact
        uses: actions/upload-artifact@v2
        with:
          name: dist-${{ matrix.binary-suffix }}
          path: |
            kluctl-${{ matrix.binary-suffix }}*
      - name: Upload pkg artifact
        uses: actions/upload-artifact@v2
        with:
          name: pkg-${{ matrix.binary-suffix }}
          path: |
            pkg

  tests:
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            binary-suffix: linux-amd64
          - os: macos-10.15
            binary-suffix: darwin-amd64
          - os: windows-2019
            binary-suffix: windows-amd64
        os: [ubuntu-18.04, macos-10.15, windows-2019]
      fail-fast: false
    concurrency: docker.ci.kluctl.io-${{ matrix.binary-suffix }}
    needs:
      - version
      - build
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.17.6'
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup TOOLS envs
        shell: bash
        run: |
          if [ "${{ runner.os }}" != "Windows" ]; then
            echo "SUDO=sudo" >> $GITHUB_ENV
          fi

          TOOLS_EXE=
          TOOLS_TARGET_DIR=$GITHUB_WORKSPACE/bin
          mkdir $TOOLS_TARGET_DIR

          if [ "${{ runner.os }}" == "macOS" ]; then
            TOOLS_OS=darwin
          elif [ "${{ runner.os }}" == "Windows" ]; then
            TOOLS_OS=windows
            TOOLS_EXE=.exe
          else
            TOOLS_OS=linux
          fi
          echo "TOOLS_OS=$TOOLS_OS" >> $GITHUB_ENV
          echo "TOOLS_TARGET_DIR=$TOOLS_TARGET_DIR" >> $GITHUB_ENV
          echo "$TOOLS_TARGET_DIR" >> $GITHUB_PATH
      - name: "[Windows] Install openssh"
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install openssh
      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        with:
          limit-access-to-actor: true
      - name: Provide required tools versions
        shell: bash
        run: |
          echo "KUBECTL_VERSION=1.21.5" >> $GITHUB_ENV
          echo "KIND_VERSION=0.11.1" >> $GITHUB_ENV
          echo "HELM_VERSION=3.6.3" >> $GITHUB_ENV
          echo "DOCKER_VERSION=20.10.9" >> $GITHUB_ENV
      - name: Download required tools
        shell: bash
        run: |
          curl -L -o kubectl$TOOLS_EXE https://storage.googleapis.com/kubernetes-release/release/v$KUBECTL_VERSION/bin/${TOOLS_OS}/amd64/kubectl$TOOLS_EXE && \
              $SUDO mv kubectl$TOOLS_EXE "$TOOLS_TARGET_DIR/"
          curl -L -o kind$TOOLS_EXE https://github.com/kubernetes-sigs/kind/releases/download/v${KIND_VERSION}/kind-${TOOLS_OS}-amd64 && \
              $SUDO mv kind$TOOLS_EXE "$TOOLS_TARGET_DIR/"
          curl -L -o helm.tar.gz https://get.helm.sh/helm-v$HELM_VERSION-${TOOLS_OS}-amd64.tar.gz && \
              tar xzf helm.tar.gz && \
              $SUDO mv ${TOOLS_OS}-amd64/helm$TOOLS_EXE "$TOOLS_TARGET_DIR/"
          if [ "${{ runner.os }}" == "macOS" ]; then
            curl -L -o docker.tar.gz https://download.docker.com/mac/static/stable/x86_64/docker-$DOCKER_VERSION.tgz
            tar xzf docker.tar.gz
            $SUDO mv docker/docker "$TOOLS_TARGET_DIR/"
            rm -rf docker
          elif [ "${{ runner.os }}" == "Windows" ]; then
            curl -L -o docker.zip https://download.docker.com/win/static/stable/x86_64/docker-$DOCKER_VERSION.zip
            unzip docker.zip
            mv docker/docker.exe "$TOOLS_TARGET_DIR/"
            rm -rf docker
          fi
          $SUDO chmod -R +x "$TOOLS_TARGET_DIR/"
      - name: Test required tools
        shell: bash
        run: |
          kubectl version || true
          kind version || true
          helm version || true
      - name: Download pkg artifacts
        uses: actions/download-artifact@v2
        with:
          name: pkg-${{ matrix.binary-suffix }}
          path: pkg
      - name: Port-forward docker
        shell: bash
        run: |
          echo "${{ secrets.CI_SSH_KEY }}" > kluctl-ci.pem
          chmod og-rwx kluctl-ci.pem
          ls -lah kluctl-ci.pem
          ./hack/setup-docker-port-forward.sh
          echo "DOCKER_HOST=localhost:2375" >> $GITHUB_ENV
      - name: Start kind cluster
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            PORT=10000
          elif [ "${{ runner.os }}" == "Windows" ]; then
            PORT=10001
          else
            PORT=10002
          fi
          KIND_CLUSTER_NAME=$(echo "kluctl-${{ runner.os }}" | awk '{{  print tolower($1)}}')
          echo "KIND_CLUSTER_NAME=$KIND_CLUSTER_NAME" >> $GITHUB_ENV
          echo "KIND_KUBECONFIG=$(pwd)/kind-kubeconfig" >> $GITHUB_ENV

          ./hack/start-kind-cluster.sh "$KIND_CLUSTER_NAME" "$PORT"
      - name: Go Mod Vendor
        shell: bash
        run: |
          go mod vendor
      - name: Run tests
        shell: bash
        run: |
          go test ./cmd/... ./pkg/... -v
      - name: Run e2e tests
        shell: bash
        run: |
          go test ./e2e/... -parallel 4 -v
      - name: Delete kind cluster
        shell: bash
        run: |
          kind delete cluster --name $KIND_CLUSTER_NAME
      - name: Check docs
        shell: bash
        run: |
          go run ./hack/replace-commands-help --commands-md ./docs/commands.md

          if [ "$(git status --porcelain -- docs)" != "" ]; then
            echo "commands.md is not up-to-date. Run "./hack/replace-commands-help --commands-md ./docs/commands.md" to fix this!"
            exit 1
          fi

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs:
      - version
      - build
      - tests
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download changelog artifacts
        uses: actions/download-artifact@v2
        with:
          name: changelog
      - name: Download dist artifacts
        uses: actions/download-artifact@v2
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: true
          body_path: changelog/CHANGELOG.md
          files: |
            kluctl-linux-*
            kluctl-darwin-*
            kluctl-windows-*

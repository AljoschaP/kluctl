name: build

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v2
        with:
          go-version: '1.17.6'
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.2
      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download python
        run: |
          ./hack/download-python.sh linux
          ./hack/download-python.sh darwin
          ./hack/download-python.sh windows
      - name: Get Version
        id: get_version
        run: |
          go install github.com/bvieira/sv4git/v2/cmd/git-sv@v2.7.0
          KLUCTL_VERSION="$(git sv next-version)"
          if [[ "${{ github.ref }}" != refs/tags/* ]]; then
            KLUCTL_VERSION="$KLUCTL_VERSION-dev-$(git rev-parse --short HEAD)"
          fi
          echo "KLUCTL_VERSION=$KLUCTL_VERSION"
          echo "KLUCTL_VERSION=$KLUCTL_VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"
      - name: Generate Changelog
        id: gen_changelog
        run: |
          git sv changelog -n 1 > CHANGELOG.md
      - name: Upload Changelog
        uses: actions/upload-artifact@v2
        with:
          name: changelog
          path: |
            CHANGELOG.md
      - name: Write Version to version.go
        run: |
          sed -ibak "s/0.0.0/$KLUCTL_VERSION/g" pkg/version/version.go
          cat pkg/version/version.go
      - name: Go Mod Vendor
        run: |
          go mod vendor
      - name: Go Generate
        run: |
          go generate ./...
          go generate -tags darwin ./pkg/python
          go generate -tags windows ./pkg/python
      - name: Check docs
        run: |
          go run ./hack/replace-commands-help --commands-md ./docs/commands.md

          if [ "$(git status --porcelain -- docs)" != "" ]; then
            echo "commands.md is not up-to-date. Run "./hack/replace-commands-help --commands-md ./docs/commands.md" to fix this!"
            exit 1
          fi
      - name: Run unit tests
        run: |
          go test ./cmd/... ./pkg/... -v
      - name: Build kluctl (linux)
        run: |
          export CGO_ENABLED=0
          export GOARCH=amd64
          export GOOS=linux
          go build ./cmd/kluctl
          go test -c ./e2e
          mv kluctl kluctl-linux-amd64
          mv e2e.test e2e.test-linux-amd64
      - name: Build kluctl (darwin)
        run: |
          export CGO_ENABLED=0
          export GOARCH=amd64
          export GOOS=darwin
          go build ./cmd/kluctl
          go test -c ./e2e
          mv kluctl kluctl-darwin-amd64
          mv e2e.test e2e.test-darwin-amd64
      - name: Build kluctl (windows)
        run: |
          export CGO_ENABLED=0
          export GOARCH=amd64
          export GOOS=windows
          go build ./cmd/kluctl
          go test -c ./e2e
          mv kluctl.exe kluctl-windows-amd64.exe
          mv e2e.test.exe e2e.test-windows-amd64.exe
      - name: Build checksums.txt
        run: |
          sha256sum kluctl-linux-amd64 > checksums.txt
          sha256sum kluctl-darwin-amd64 >> checksums.txt
          sha256sum kluctl-windows-amd64.exe >> checksums.txt
      - name: Upload dist artifact
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            kluctl-linux-amd64
            kluctl-darwin-amd64
            kluctl-windows-amd64.exe
            e2e.test-linux-amd64
            e2e.test-darwin-amd64
            e2e.test-windows-amd64.exe
            checksums.txt

  docker-host:
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install zerotier
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y gpg jq
          curl -s https://install.zerotier.com | sudo bash
      - name: Stop docker
        run: |
          # Ensure docker is down and that the test jobs can wait for it to be available again after joining the network.
          # Otherwise they might join and then docker restarts
          sudo systemctl stop docker
      - name: Create network
        run: |
          export CI_ZEROTIER_API_KEY=${{ secrets.CI_ZEROTIER_API_KEY }}
          ./hack/zerotier-create-network.sh $GITHUB_RUN_ID
      - name: Join network
        run: |
          export CI_ZEROTIER_API_KEY=${{ secrets.CI_ZEROTIER_API_KEY }}
          ./hack/zerotier-join-network.sh $GITHUB_RUN_ID docker
      - name: Restart ssh
        run: |
          sudo systemctl restart ssh
      - name: Restart docker
        run: |
          sudo sed -i 's|-H fd://|-H fd:// -H tcp://0.0.0.0:2375|g' /lib/systemd/system/docker.service
          sudo systemctl daemon-reload
          sudo systemctl start docker
      - name: Wait for other jobs to finish
        run: |
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          while true; do
            JOBS=$(gh api /repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/jobs | jq '.jobs[] | select(.name | startswith("tests "))')
            NON_COMPLETED=$(echo $JOBS | jq '. | select(.status != "completed")')
            if [ "$NON_COMPLETED" == "" ]; then
              break
            fi
            sleep 5
          done
      - name: Delete network
        if: always()
        run: |
          export CI_ZEROTIER_API_KEY=${{ secrets.CI_ZEROTIER_API_KEY }}
          ./hack/zerotier-delete-network.sh $GITHUB_RUN_ID

  tests:
    if: "!startsWith(github.ref, 'refs/tags/')"
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            binary-suffix: linux-amd64
          - os: macos-10.15
            binary-suffix: darwin-amd64
          - os: windows-2019
            binary-suffix: windows-amd64
        os: [ubuntu-18.04, macos-10.15, windows-2019]
      fail-fast: false
    needs:
      - build
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install zerotier (linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y gpg jq
          curl -s https://install.zerotier.com | sudo bash
      - name: Install zerotier (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install zerotier-one
      - name: Install zerotier (windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install zerotier-one
          echo "#!/usr/bin/env bash" > /usr/bin/zerotier-cli
          echo '/c/ProgramData/ZeroTier/One/zerotier-one_x64.exe -q "$@"' >> /usr/bin/zerotier-cli
          chmod +x /usr/bin/zerotier-cli

          choco install netcat
          echo /c/ProgramData/chocolatey/bin >> $GITHUB_PATH
      - name: Join network
        shell: bash
        run: |
          export CI_ZEROTIER_API_KEY=${{ secrets.CI_ZEROTIER_API_KEY }}
          ./hack/zerotier-join-network.sh $GITHUB_RUN_ID ${{ matrix.binary-suffix }}
      - name: Determine DOCKER_HOST
        shell: bash
        run: |
          export CI_ZEROTIER_API_KEY=${{ secrets.CI_ZEROTIER_API_KEY }}
          ./hack/zerotier-setup-docker-host.sh $GITHUB_RUN_ID
      - name: Setup TOOLS envs
        shell: bash
        run: |
          if [ "${{ runner.os }}" != "Windows" ]; then
            echo "SUDO=sudo" >> $GITHUB_ENV
          fi

          TOOLS_EXE=
          TOOLS_TARGET_DIR=$GITHUB_WORKSPACE/bin
          mkdir $TOOLS_TARGET_DIR

          if [ "${{ runner.os }}" == "macOS" ]; then
            TOOLS_OS=darwin
          elif [ "${{ runner.os }}" == "Windows" ]; then
            TOOLS_OS=windows
            TOOLS_EXE=.exe
          else
            TOOLS_OS=linux
          fi
          echo "TOOLS_EXE=$TOOLS_EXE" >> $GITHUB_ENV
          echo "TOOLS_OS=$TOOLS_OS" >> $GITHUB_ENV
          echo "TOOLS_TARGET_DIR=$TOOLS_TARGET_DIR" >> $GITHUB_ENV
          echo "$TOOLS_TARGET_DIR" >> $GITHUB_PATH
      - name: "[Windows] Install openssh"
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install openssh
      - name: Provide required tools versions
        shell: bash
        run: |
          echo "KUBECTL_VERSION=1.21.5" >> $GITHUB_ENV
          echo "KIND_VERSION=0.11.1" >> $GITHUB_ENV
          echo "HELM_VERSION=3.6.3" >> $GITHUB_ENV
          echo "DOCKER_VERSION=20.10.9" >> $GITHUB_ENV
      - name: Download required tools
        shell: bash
        run: |
          curl -L -o kubectl$TOOLS_EXE https://storage.googleapis.com/kubernetes-release/release/v$KUBECTL_VERSION/bin/${TOOLS_OS}/amd64/kubectl$TOOLS_EXE && \
              $SUDO mv kubectl$TOOLS_EXE "$TOOLS_TARGET_DIR/"
          curl -L -o kind$TOOLS_EXE https://github.com/kubernetes-sigs/kind/releases/download/v${KIND_VERSION}/kind-${TOOLS_OS}-amd64 && \
              $SUDO mv kind$TOOLS_EXE "$TOOLS_TARGET_DIR/"
          curl -L -o helm.tar.gz https://get.helm.sh/helm-v$HELM_VERSION-${TOOLS_OS}-amd64.tar.gz && \
              tar xzf helm.tar.gz && \
              $SUDO mv ${TOOLS_OS}-amd64/helm$TOOLS_EXE "$TOOLS_TARGET_DIR/"
          if [ "${{ runner.os }}" == "macOS" ]; then
            curl -L -o docker.tar.gz https://download.docker.com/mac/static/stable/x86_64/docker-$DOCKER_VERSION.tgz
            tar xzf docker.tar.gz
            $SUDO mv docker/docker "$TOOLS_TARGET_DIR/"
            rm -rf docker
          elif [ "${{ runner.os }}" == "Windows" ]; then
            curl -L -o docker.zip https://download.docker.com/win/static/stable/x86_64/docker-$DOCKER_VERSION.zip
            unzip docker.zip
            mv docker/docker.exe "$TOOLS_TARGET_DIR/"
            rm -rf docker
          fi
          $SUDO chmod -R +x "$TOOLS_TARGET_DIR/"
      - name: Test required tools
        shell: bash
        run: |
          kubectl version || true
          kind version || true
          helm version || true
      - name: Start kind cluster
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            PORT=10000
          elif [ "${{ runner.os }}" == "Windows" ]; then
            PORT=10001
          else
            PORT=10002
          fi
          KIND_CLUSTER_NAME=$(echo "kluctl-${{ runner.os }}" | awk '{{  print tolower($1)}}')
          echo "KIND_CLUSTER_NAME=$KIND_CLUSTER_NAME" >> $GITHUB_ENV
          echo "KIND_KUBECONFIG=$(pwd)/kind-kubeconfig" >> $GITHUB_ENV

          ./hack/start-kind-cluster.sh "$KIND_CLUSTER_NAME" "$DOCKER_IP" "$PORT"
      - name: Download dist artifacts
        uses: actions/download-artifact@v2
      - name: Run e2e tests
        shell: bash
        run: |
          chmod +x ./dist/*
          export KLUCTL_EXE=./dist/kluctl-${{ matrix.binary-suffix }}$TOOLS_EXE
          ./dist/e2e.test-${{ matrix.binary-suffix }}$TOOLS_EXE -test.v

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          body_path: changelog/CHANGELOG.md
          files: |
            dist/kluctl-linux-*
            dist/kluctl-darwin-*
            dist/kluctl-windows-*
            dist/checksums.txt

